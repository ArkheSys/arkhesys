using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Linq;
using cwkGestao.Modelo;
using cwkGestao.Negocio;
using cwkGestao.Negocio.Tributacao;
using Aplicacao.Base;
using Cwork.Utilitarios.Componentes;
using Aplicacao.Util;
using Cwork.Utilitarios.Componentes.Mascaras;

namespace Aplicacao
{
    public partial class FormNotaItem : IntermediariasTela.FormManutNotaItemIntermediaria
    {
        private bool devolucao = false;
        private bool alterandoProduto;
        private cwkGestao.Negocio.LogicaTelaNotaItem logicaTelaNotaItem;
        private Produto Produto = new Produto();
        private cwkGestao.Modelo.Produto ProdutoSelecionado { get { return Produto; } set { Produto = value; } }
        public bool TotalLiberado { get; set; }
        public ProdutoFCI produtoFCI { get; set; }

        private NotaItem clone;
        ProdutoFCI produtoFCICarregado;
        public FormNotaItem(LogicaTelaNotaItem logicaTelaNotaItem)
        {
            this.logicaTelaNotaItem = logicaTelaNotaItem;
            this.Selecionado = logicaTelaNotaItem.GetNotaItem;
            this.TotalLiberado = true;

            clone = new NotaItem();
            NotaItemController.Instancia.Clonar(this.Selecionado, clone);

            this.Operacao = Acao.NaoPersistir;
            AtribuiTags();

            SetNomeEntidadeExibicao();
            if (this.Selecionado.Produto == null)
                this.Text = "Incluindo registro de " + nomeEntidadeExibicao;
            else
            {
                this.Text = "Alterando registro de " + nomeEntidadeExibicao;            
            }
        }

        private void CarregaListFCIsProduto(Produto pProduto)
        {
            if (logicaTelaNotaItem.Ent_Sai == InOutType.Saída)
            {
                cbFCI.Properties.DataSource = ProdutoFCIController.Instancia.GetFCIByIdProduto(pProduto.ID);
            }
        }

        private void LiberaComboFCI(bool Yes_No)
        {
            try
            {
                cbFCI.Enabled = Yes_No;
                cbFCI.Visible = Yes_No;

                if (Yes_No)
                {
                    cbFCI.Location = new Point(307, 101);
                    cbFCI.Size = new Size(280, 20);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void LiberaLkpFCI(bool Yes_No)
        {
            try
            {
                lkpFCI.Visible = Yes_No;
                lkpFCI.Enabled = Yes_No;
                lbFCI.Visible = Yes_No;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void LiberaCamposFCI(Produto pProduto)
        {
            if (logicaTelaNotaItem.Ent_Sai == InOutType.Saída)
            {
                switch (pProduto.OrigemProd)
                {
                    case 3:
                        //validação para verificar se a operação é inter estadual.
                        if (logicaTelaNotaItem.PessoaSelecionada != null && logicaTelaNotaItem.FilialSelecionada != null)
                        {
                            if (logicaTelaNotaItem.PessoaSelecionada.EnderecoPrincipal().Cidade.UF.Sigla != logicaTelaNotaItem.FilialSelecionada.Cidade.UF.Sigla)
                            {
                                LiberaComboFCI(true);
                                lbFCI.Enabled = true;
                                lbFCI.Visible = true;
                            }
                            else
                            {
                                LiberaComboFCI(false);
                                lbFCI.Enabled = false;
                                lbFCI.Visible = false;
                            }
                        }
                        break;
                    case 5: goto case 3;
                    case 8: goto case 3;

                    default:
                        LiberaComboFCI(false);
                        lbFCI.Enabled = false;
                        lbFCI.Visible = false;
                        break;
                }
            }
            else if (logicaTelaNotaItem.tipoNota.BImportacao)
            {
                switch (pProduto.OrigemProd)
                {
                    case 3:
                        LiberaLkpFCI(true);
                        lbFCI.Enabled = true;
                        lbFCI.Visible = true;
                        break;
                    case 5: goto case 3;
                    case 8: goto case 3;

                    default:
                        LiberaLkpFCI(false);
                        lbFCI.Enabled = false;
                        lbFCI.Visible = false;
                        break;
                }
            }
            else
            {
                LiberaLkpFCI(false);
            }
            this.Refresh();
        }

        protected override void OnShown(EventArgs e)
        {
            base.OnShown(e);

            CarregarCodigoFCI();
            if (this.Selecionado.Produto != null)
            {
                txtProduto.Text = String.Format("{0} | {1}", Selecionado.Produto.Nome, Selecionado.Produto.Codigo);
                ProdutoSelecionado = Selecionado.Produto;
                LiberaCamposFCI(this.Selecionado.Produto);
                CarregaListFCIsProduto(this.Selecionado.Produto);
                cbFCI.EditValue = Selecionado.ProdutoFCI;
            }
            else
            {
                LiberaCamposFCI(new Produto());
            }


            LiberaCamposTributacaoParaEdicao();
            LiberaCamposImportacaoParaEdicao();
        }

        private void CarregarCodigoFCI()
        {
            produtoFCICarregado = Selecionado.ProdutoFCI;
            if (produtoFCICarregado == null)
                lkpFCI.EditValue = "";
            else
                lkpFCI.EditValue = produtoFCICarregado.FCI == null ? "" : produtoFCICarregado.FCI; 
        }

        private void LiberaCamposImportacaoParaEdicao()
        {
            var notaItem = logicaTelaNotaItem.GetNotaItem;
            if (notaItem.CFOP != null && notaItem.CFOP.CFOP.StartsWith("3"))
            {
                foreach (Control item in tpImportacao.Controls)
                {
                    item.Enabled = true;
                }
                tpGeral.TabPages.Insert(tpGeral.TabPages.Count, tpImportacao);
            }
            else
            {
                tpGeral.TabPages.Remove(tpImportacao);
                foreach (Control item in tpImportacao.Controls)
                {
                    item.Enabled = false;
                }
            }
        }

        private void LiberaCamposTributacaoParaEdicao()
        {
            var tributacaoLiberadaParaEdicao = logicaTelaNotaItem.TributacaoLiberadaParaEdicao();

            LiberaCampoEdicao(txtBaseICMS, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtAliqICMS, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtValorICMS, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtValorOutroICMS, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtValorIsentoICMS, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtValorRetidoICMS, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtBaseICMSSubst, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtBaseCSOSN, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtPCredSN_N29, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtVCredICMSSN_N30, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtVBC_O10, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtPIPI_O13, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtVIPI_O14, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtVBC_Q07, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtPPIS_Q08, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtVPIS_Q09, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtVBC_S07, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtPCOFINS_S08, tributacaoLiberadaParaEdicao);
            LiberaCampoEdicao(txtVCOFINS_S11, tributacaoLiberadaParaEdicao);

            LiberaCampoEdicao(cbCsosn, Selecionado.Nota.Filial.SimplesNacional != 2);
            LiberaCampoEdicao(cbIcmsCst, Selecionado.Nota.Filial.SimplesNacional == 2);
        }

        private void LiberaCampoEdicao(DevExpress.XtraEditors.BaseEdit controle, bool liberar)
        {
            controle.Properties.ReadOnly = !liberar;
            controle.TabStop = liberar;

            
            if (controle == cbCsosn)
            {
                if (this.Selecionado.Nota.TipoNota.Operacao.CFOP_DEstado.BDevolucao ||
                    this.Selecionado.Nota.TipoNota.Operacao.CFOP_FEstado_C.BDevolucao ||
                    this.Selecionado.Nota.TipoNota.Nome.Contains("DEVOLUCAO") ||
                    this.Selecionado.Nota.TipoNota.Nome.Contains("Devolucao"))
                {
                    devolucao = true;
                    controle.Properties.ReadOnly = false;
                    controle.TabStop = true;
                }
                else
                {
                    devolucao = false;
                    controle.Properties.ReadOnly = true;
                    controle.TabStop = false;                  
                }
            }          
        }

        protected override void InitializeChildComponents()
        {
            InitializeComponent();
            lkpCFOP.OnIDChanged += new EventHandler(lkpCFOP_IDChanged);
            AtribuiTags();
        }

        private void AtribuiTags()
        {
            tcPrincipal.Tag = Selecionado;
            tpDados.Tag = Selecionado;
            tpPIS_COFINS.Tag = Selecionado;
            tpInfAdicionais.Tag = Selecionado;
            tpRateioProjetos.Tag = Selecionado;
            tpImportacao.Tag = Selecionado;
            groupPIS.Tag = Selecionado;
            groupIPI.Tag = Selecionado;
            groupICMS.Tag = Selecionado;
            groupCSOSN.Tag = Selecionado;
            groupCONFINS.Tag = Selecionado;
            groupAdicao.Tag = Selecionado;
            lkbCFOP.SubForm = new FormTabelaCFOP();

            btnIncluirRateio.SubForm = new FormRateioNotaItem(Selecionado);
            var formAdicao = new FormAdicaoNotaItem(Selecionado);
            btnAlterarAdicaoNotaItem.SubForm = formAdicao;
            btnIncluirAdicaoNotaItem.SubForm = formAdicao;
            btnExcluirAdicaoNotaItem.SubForm = formAdicao;
        }

        private void ProdutoAlterado()
        {
            if (ProdutoSelecionado != null && (Selecionado.Produto == null || ProdutoSelecionado.ID != Selecionado.Produto.ID))
            {
                try
                {
                    var _produto = ProdutoController.Instancia.LoadObjectById(ProdutoSelecionado.ID);
                    if (ProdutoSelecionado.Inativo)
                    {
                        MessageBox.Show("Este produto está inativo.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtProduto.EditValue = null;
                        txtProduto.Focus();

                        return;
                    }

                    alterandoProduto = true;
                    string mascara = logicaTelaNotaItem.SetProduto(_produto);
                    LiberaCamposTributacaoParaEdicao();
                    AtualizarDadosTela();

                    txtQuantidade.Properties.Mask.EditMask = mascara;

                    var produto = ProdutoController.Instancia.LoadObjectById(ProdutoSelecionado.ID);
                    if (Selecionado.Nota.TipoNota.TipoValorNotaCompra == TipoValorProduto.PrecoBase)
                    {
                        txtValor.EditValue = Selecionado.Valor = produto.PrecoFornecedor;

                        logicaTelaNotaItem.SetValor(Convert.ToDecimal(txtValor.EditValue));
                        AtualizarDadosTela();
                        
                    }
                }
                catch (Exception ex)
                {
                    new FormErro(ex).ShowDialog();
                    txtProduto.EditValue = null;
                    txtProduto.Focus();
                }
                finally
                {
                    alterandoProduto = false;
                }
            }
        }

        private void AtualizarDadosTela()
        {
            base.ObjetoPraTela(this.tcPrincipal);
        }

        protected override List<Exception> ObjetoPraTela(Control pai)
        {
            alterandoProduto = true;

            NotaItem notaItem = logicaTelaNotaItem.GetNotaItem;
            try
            {
                if (notaItem.TAG_CST.Length == 2)
                {
                    cbCsosn.SelectedIndex = notaItem.CSOSN;
                    cbIcmsCst.SelectedIndex = ConversorCsts.TributacaoParaIndice(notaItem.TAG_CST);
                }
                else
                {
                    cbIcmsCst.SelectedIndex = notaItem.Produto.Tributacao;
                    cbCsosn.SelectedIndex = notaItem.CSOSN;
                }
                cbPisCst.SelectedIndex = ConversorCsts.CstPisParaIndice(notaItem.CST_Pis);
                cbCofinsCst.SelectedIndex = ConversorCsts.CstCofinsParaIndice(notaItem.CST_Cofins);
                cbIpiCst.SelectedIndex = ConversorCsts.CstIpiParaIndice(notaItem.CST_Ipi);

                lkpCFOP.EditValue = notaItem.CFOP;
                lkpTexto.EditValue = notaItem.Texto;
            }
            catch { }
            
            txtAliqICMS.EditValue = notaItem.AliqICMS;
            txtBaseCSOSN.EditValue = notaItem.Total;
            txtBaseICMS.EditValue = notaItem.BaseICMS;
            txtBaseICMSSubst.EditValue = notaItem.BaseICMSSubst;
            txtPCOFINS_S08.EditValue = notaItem.PCOFINS_S08;
            txtPCredSN_N29.EditValue = notaItem.PCredSN_N29;
            txtPercDesconto.EditValue = notaItem.PercDesconto;
            txtPesoBruto.EditValue = notaItem.PesoBruto;
            txtPesoLiquido.EditValue = notaItem.PesoLiquido;
            txtPIPI_O13.EditValue = notaItem.PIPI_O13;
            txtPPIS_Q08.EditValue = notaItem.PPIS_Q08;
            txtQuantidade.EditValue = notaItem.Quantidade;
            txtSequencia.EditValue = notaItem.Sequencia;
            txtTotal.EditValue = notaItem.Total;

            txtUnidade.EditValue = notaItem.Unidade ?? (ProdutoSelecionado.Unidade == null ? "" : ProdutoSelecionado.Unidade.Nome);

            txtValor.EditValue = notaItem.Valor;
            txtValorICMS.EditValue = notaItem.ValorICMS;
            txtValorIsentoICMS.EditValue = notaItem.ValorIsentoICMS;
            txtValorOutroICMS.EditValue = notaItem.ValorOutroICMS;
            txtValorRetidoICMS.EditValue = notaItem.ValorRetidoICMS;
            txtVBC_O10.EditValue = notaItem.VBC_O10;
            txtVBC_Q07.EditValue = notaItem.VBC_Q07;
            txtVBC_S07.EditValue = notaItem.VBC_S07;
            txtVCOFINS_S11.EditValue = notaItem.VCOFINS_S11;
            txtVCredICMSSN_N30.EditValue = notaItem.VCredICMSSN_N30;
            txtVIPI_O14.EditValue = notaItem.VIPI_O14;
            txtVPIS_Q09.EditValue = notaItem.VPIS_Q09;
            mInfAdicionais.EditValue = notaItem.InfAdicionais;
            txtI19_nDI.EditValue = notaItem.I19_nDI;
            txtI20_dDI.EditValue = notaItem.I20_dDI;
            txtI21_xLocDesemb.EditValue = notaItem.I21_xLocDesemb;
            txtI22_UFDesemb.EditValue = notaItem.I22_UFDesemb;
            txtI23_dDesemb.EditValue = notaItem.I23_dDesemb;
            txtI24_cExportador.EditValue = notaItem.I24_cExportador;
            txtP02_vBC.EditValue = notaItem.P02_vBC;
            txtP03_vDespAdu.EditValue = notaItem.P03_vDespAdu;
            txtP04_vII.EditValue = notaItem.P04_vII;
            txtP05_vIOF.EditValue = notaItem.P05_vIOF;
            lkpTexto.EditValue = notaItem.Texto;
            notaItem.AliqICMSNormal = notaItem.AliqICMS;

            gcRateio_NotaItems.DataSource = null;
            gcRateio_NotaItems.DataSource = notaItem.Rateio_NotaItems;
            gcAdicoesNotaItem.DataSource = null;
            gcAdicoesNotaItem.DataSource = notaItem.AdicoesNotaItem;

            alterandoProduto = false;

            return new List<Exception>();
        }


        private bool ValidaCampoFCI()
        {
            dxErroProvider.ClearErrors();

            DateTime DtValidacao = Convert.ToDateTime(@"01/10/2013");

            if (logicaTelaNotaItem.DtEnvioNota.Date >= DtValidacao && String.IsNullOrEmpty(cbFCI.Text))
            {
                dxErroProvider.SetError(cbFCI,"Campo obrigatório.");
            }

            return !dxErroProvider.HasErrors;
        }

        protected override void sbGravar_Click(object sender, EventArgs e)
        {
            if (logicaTelaNotaItem.Ent_Sai == InOutType.Entrada)
            {
                if (Selecionado.Produto.OrigemProd == 3 || Selecionado.Produto.OrigemProd == 5 || Selecionado.Produto.OrigemProd == 8)
                {
                    if ((lkpFCI.Enabled == true) 
                        &&(lkpFCI.Visible == true)
                        &&(lkpFCI.EditValue == ""))
                    {
                        MessageBox.Show("A Partir 01/10/2013 será obrigatório informar o número de FCI", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    }
                    else
                    {
                        ProdutoFCI prodFCI = new ProdutoFCI();
                        prodFCI.FCI = Convert.ToString(lkpFCI.EditValue);
                        prodFCI.bAtivo = true;
                        prodFCI.Produto = Selecionado.Produto;
                        if (Selecionado.ProdutoFCI != null)
                            prodFCI.ID = Selecionado.ProdutoFCI.ID;

                        this.produtoFCI = prodFCI;
                    }
                }
            }
            else
            {
                if (cbFCI.Visible == true && cbFCI.Enabled == true)
                {
                    if (ValidaCampoFCI())
                    {
                        this.produtoFCI = (ProdutoFCI)cbFCI.EditValue;
                    }
                    else
                    {
                    MessageBox.Show("Após 01/10/2013 é obrigatório informar o número de FCI", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        return;
                    }
                }
            }

            base.sbGravar_Click(sender, e);
        }

        private void txtQuantidade_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetQuantidade(Convert.ToDecimal(txtQuantidade.EditValue));
            AtualizarDadosTela();
        }

        private void txtValor_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValor(Convert.ToDecimal(txtValor.EditValue));
            AtualizarDadosTela();
        }

        private void txtPercDesconto_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetDesconto(Convert.ToDecimal(txtPercDesconto.EditValue));
            AtualizarDadosTela();
        }

        private void txtBaseICMS_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetBaseIcms(Convert.ToDecimal(txtBaseICMS.EditValue));
            AtualizarDadosTela();
        }

        private void txtAliqICMS_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetAliqIcms(Convert.ToDecimal(txtAliqICMS.EditValue));
            AtualizarDadosTela();
        }

        private void txtValorICMS_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorIcms(Convert.ToDecimal(txtValorICMS.EditValue));
        }

        private void txtValorOutroICMS_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorOutrosIcms(Convert.ToDecimal(txtValorOutroICMS.EditValue));
        }

        private void txtValorIsentoICMS_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorIsentoIcms(Convert.ToDecimal(txtValorIsentoICMS.EditValue));
        }

        private void txtValorRetidoICMS_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorRetidoIcms(Convert.ToDecimal(txtValorRetidoICMS.EditValue));
        }

        private void txtBaseICMSSubst_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetBaseIcmsSubst(Convert.ToDecimal(txtBaseICMSSubst.EditValue));
        }

        private void txtPorcentagemCredito_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetPorcetagemCredito(Convert.ToDecimal(txtPCredSN_N29.EditValue));
            AtualizarDadosTela();
        }

        private void txtValorCSOSN_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorCsosn(Convert.ToDecimal(txtVCredICMSSN_N30.EditValue));
        }

        private void txtVBC_O10_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetBaseIpi(Convert.ToDecimal(txtVBC_O10.EditValue));
            AtualizarDadosTela();
        }

        private void txtPIPI_O13_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetAliqIpi(Convert.ToDecimal(txtPIPI_O13.EditValue));
            AtualizarDadosTela();
        }

        private void txtVIPI_O14_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorIpi(Convert.ToDecimal(txtVIPI_O14.EditValue));
        }

        private void txtVBC_Q07_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetBasePis(Convert.ToDecimal(txtVBC_Q07.EditValue));
            AtualizarDadosTela();
        }

        private void txtPPIS_Q08_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetAliqPis(Convert.ToDecimal(txtPPIS_Q08.EditValue));
            AtualizarDadosTela();
        }

        private void txtVPIS_Q09_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorPis(Convert.ToDecimal(txtVPIS_Q09.EditValue));
        }

        private void txtVBC_S07_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetBaseCofins(Convert.ToDecimal(txtVBC_S07.EditValue));
            AtualizarDadosTela();
        }

        private void txtPCOFINS_S08_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetAliqCofins(Convert.ToDecimal(txtPCOFINS_S08.EditValue));
            AtualizarDadosTela();
        }

        private void txtVCOFINS_S11_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetValorCofins(Convert.ToDecimal(txtVCOFINS_S11.EditValue));
        }

        private void cbCsosn_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!alterandoProduto)
            {
                logicaTelaNotaItem.SetCstCsosn(cbCsosn.SelectedIndex, devolucao);
                AtualizarDadosTela();
            }
        }

        private void lkpCFOP_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetCfop((TabelaCFOP)lkpCFOP.Selecionado);
            AtualizarDadosTela();
        }

        private void lkpCFOP_IDChanged(object sender, EventArgs e)
        {
            LiberaCamposImportacaoParaEdicao();
            LiberaCamposTributacaoParaEdicao();
        }

        private void cbIpiCst_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!alterandoProduto)
            {
                logicaTelaNotaItem.SetCstIpi(cbIpiCst.SelectedIndex);
                AtualizarDadosTela();
            }
        }

        private void cbPisCst_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!alterandoProduto)
            {
                logicaTelaNotaItem.SetCstPis(cbPisCst.SelectedIndex);
                AtualizarDadosTela();
            }
        }

        private void cbCofinsCst_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!alterandoProduto)
            {
                logicaTelaNotaItem.SetCstCofins(cbCofinsCst.SelectedIndex);
                AtualizarDadosTela();
            }
        }

        protected override void Cancelar()
        {
            NotaItemController.Instancia.Clonar(clone, this.Selecionado);

            base.Cancelar();
        }

        private void lkbProduto_Click(object sender, EventArgs e)
        {
            AbrirGridProduto();
        }

        private void AbrirGridProduto()
        {
            GridProdutoGen grid = new GridProdutoGen(ProdutoController.Instancia.GetAll().OrderBy(prod => prod.NomeOrdenado).ToList(), FormProdutoFactory.GetFormProduto(), Produto, true);
            if (cwkControleUsuario.Facade.ControleAcesso(grid))
            {
                grid.Selecionando = true;
                grid.Text += "[Todos]";
                grid.ShowDialog();
                if (grid.Selecionado != null)
                {
                    if (grid.Selecionado.ID != 0)
                    {
                        txtProduto.EditValue = String.Format("{0} | {1}", grid.Selecionado.Nome, grid.Selecionado.Codigo);
                        Produto = grid.Selecionado;
                        ProdutoAlterado();

                        var prod = ProdutoController.Instancia.LoadObjectById(Produto.ID);

                        LiberaCamposFCI(prod);
                        CarregaListFCIsProduto(prod);
                    }
                }
            }
        }

        private void txtPesoBruto_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetPesoBruto((decimal)txtPesoBruto.EditValue);
            AtualizarDadosTela();
        }

        private void txtPesoLiquido_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetPesoLiquido((decimal)txtPesoLiquido.EditValue);
            AtualizarDadosTela();
        }

        protected override bool ValidacoesAdicionais()
        {
            var notaItem = logicaTelaNotaItem.GetNotaItem;
            if (notaItem.CFOP != null)
            {
                if (notaItem.CFOP.CFOP.StartsWith("7"))
                {
                    if (notaItem.TAG_CST.Length < 3 && notaItem.TAG_CST != "41")
                    {
                        dxErroProvider.SetError(cbIcmsCst, "Notas de exportação devem ter CST igual a 41");
                    }
                    else if (notaItem.TAG_CST.Length == 3 && notaItem.TAG_CST != "300")
                    {
                        dxErroProvider.SetError(cbCsosn, "Notas de exportação devem ter CSOSN igual a 300");
                    }
                }
                else if (notaItem.CFOP.CFOP.StartsWith("3"))
                {
                    if (notaItem.AdicoesNotaItem.Count == 0)
                    {
                        MessageBox.Show("Inclua pelo menos uma adição de importação.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                }
            }

            return !dxErroProvider.HasErrors;
        }

        private void cbIcmsCst_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!alterandoProduto)
            {
                logicaTelaNotaItem.SetCstCsosn(cbIcmsCst.SelectedIndex, devolucao);
                AtualizarDadosTela();
            }
        }

        private void txtI19_nDI_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetI19_nDI(txtI19_nDI.Text);
        }

        private void txtI20_dDI_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetI20_dDI(txtI20_dDI.DateTime);
        }

        private void txtI21_xLocDesemb_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetI21_xLocDesemb(txtI21_xLocDesemb.Text);
        }

        private void txtI22_UFDesemb_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetI22_UFDesemb(txtI22_UFDesemb.Text);
        }

        private void txtI23_dDesemb_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetI23_dDesemb(txtI23_dDesemb.DateTime);
        }

        private void txtI24_cExportador_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetI24_cExportador(txtI24_cExportador.Text);
        }

        private void txtP02_vBC_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetP02_vBC(Convert.ToDecimal(txtP02_vBC.EditValue));
        }

        private void txtP03_vDespAdu_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetP03_vDespAdu(Convert.ToDecimal(txtP03_vDespAdu.EditValue));
        }

        private void txtP04_vII_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetP04_vII(Convert.ToDecimal(txtP04_vII.EditValue));
        }

        private void txtP05_vIOF_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetP05_vIOF(Convert.ToDecimal(txtP05_vIOF.EditValue));
        }

        private void lkbTexto_Click(object sender, EventArgs e)
        {
            var grid = new GridGenerica<TextoLei>(TextoLeiController.Instancia.GetAll(), new FormTextoLei(), (TextoLei)lkpTexto.Selecionado);
            grid.Selecionando = true;
            if (cwkControleUsuario.Facade.ControleAcesso(grid))
                grid.ShowDialog();

            lkpTexto.EditValue = grid.Selecionado;
        }

        private void lkpTexto_Leave(object sender, EventArgs e)
        {
            logicaTelaNotaItem.SetTextoLei((TextoLei)lkpTexto.Selecionado);
        }

        private void txtTotal_Leave(object sender, EventArgs e)
        {
            if (TotalLiberado == true)
            {
                NotaItem notaItem = logicaTelaNotaItem.GetNotaItem;
                notaItem.Total = Convert.ToDecimal(txtTotal.EditValue);
                AtualizarDadosTela();
            }
        }

        private void txtProduto_Leave(object sender, EventArgs e)
        {
            int index = txtProduto.Text.IndexOf(" |");
            bool valorAlterado;
            if (index > 0)
                valorAlterado = ProdutoSelecionado.Nome != txtProduto.EditValue.ToString().Remove(index);
            else
                valorAlterado = true;

            if ((ProdutoSelecionado == null || valorAlterado ) && !String.IsNullOrEmpty(txtProduto.Text))
            {
                ProdutoSelecionado = PesquisaCampos();

                if (ProdutoSelecionado != null)
                {
                    txtProduto.Text = String.Format("{0} | {1}", ProdutoSelecionado.Nome, ProdutoSelecionado.Codigo);
                    ProdutoAlterado();

                    ProdutoSelecionado = ProdutoController.Instancia.LoadObjectById(ProdutoSelecionado.ID);

                    LiberaCamposFCI(ProdutoSelecionado);
                    CarregaListFCIsProduto(ProdutoSelecionado);
                }
                else
                {
                    txtProduto.EditValue = null;
                    txtProduto.Focus();
                }
            }
        }

        private Produto PesquisaCampos()
        {
            var produtos = ProdutoController.Instancia.LoadProdutoByCodigoString(txtProduto.Text);
            if (produtos.Count == 0)
            {
                MessageBox.Show("Produto não encontrado!", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return null;
            }
            else if (produtos.Count == 1)
            {
                return produtos.First();
            }
            else
            {
                return ChamaGrid(produtos);
            }
        }

        private Produto ChamaGrid(IList<Produto> produtos)
        {
            GridProdutoGen grid = new GridProdutoGen(produtos, new FormProduto(), null, true);

            grid.Selecionando = true;
            grid.ShowDialog();
            return grid.Selecionado;
        }

        private void txtProduto_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F5)
                AbrirGridProduto();               
        }
    }
}
