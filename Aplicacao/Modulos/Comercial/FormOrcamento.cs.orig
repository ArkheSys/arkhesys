using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Xml.Linq;
using Aplicacao.Base;
using Aplicacao.Util;
using Aplicacao.ValueObjects;
using cwkGestao.Modelo;
using cwkGestao.Modelo.Exceptions;
using cwkGestao.Negocio;
using cwkGestao.Negocio.Tributacao;
using cwkGestao.Negocio.Tributacao.Impl;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Columns;
using cwkGestao.Modelo.Proxy;
using cwkControleUsuario;
using Aplicacao.Modulos.Producao;

namespace Aplicacao
{
    public partial class FormOrcamento : Aplicacao.IntermediariasTela.FormManutOrcamentoIntermediaria
    {
        public PCP_Lote loteProducao { get; set; }

        #region stuff

        private string displayQtd = "##,###,##0.####";

        private static readonly string ArquivoConfiguracaoTabStop = "XML\\TabStopOrcamento.xml";
        private Pessoa PessoaOld = new Pessoa();
        private bool atualizarPessoa = false;
        bool permiteInserirItens;
        public InOutType TipoPedido { get; set; }
        bool alteracoesUnitariasAutorizadas;
        bool vendedorAlterado;
        bool carregandoForm = false;
        private Pessoa vendedorOriginal;

        private TipoPedido _tipoPedido;

        private bool bAltercaoParcelas = false;

        public FormOrcamento()
        {
            
        }

        public FormOrcamento(InOutType _tipoPedido)
        {
            TipoPedido = _tipoPedido;
        }

        public List<ProdutoEditavel> Items { get; set; }

        protected override void InitializeChildComponents()
        {
            InitializeComponent();
            NosGridsPegarColunasDefinidasNaEntidade = true;
            if (ConfiguracaoLocalController.GetModuloOrcamentoVenda() == 0)
            {
                lkpProjeto.Visible = false;
                lkbProjeto.Visible = false;
                labelControl12.Visible = false;
            }

            lkbTabelaPreco.SubForm = new FormTabelaPreco();
            lkbCondicao.SubForm = new FormCondicao();
            lkbFilial.SubForm = new FormFilial();

            Items = TransformPedidoItem(Selecionado.Items);
            grcItems.Tag = this;

            tabParcelas.Tag = Selecionado;
            tabObservacoes.Tag = Selecionado;
            tabTransportadora.Tag = Selecionado;
        }

        protected override void AcoesAntesBase_Load(object sender, EventArgs e)
        {
            carregandoForm = true;

            Items = TransformPedidoItem(Selecionado.Items);
            permiteInserirItens = false;
            alteracoesUnitariasAutorizadas = false;
            vendedorAlterado = false;

            tabControlRodape.SelectedTabPageIndex = 0;
            tabTransportadora.Tag = Selecionado;
        }

        private void FormOrcamento_Shown(object sender, EventArgs e)
        {
            bAltercaoParcelas = BloqueaAlteracaoParcelas();
            if (!bAltercaoParcelas)
            {
                lkbCondicao.Enabled = true;
                lkpCondicao.Enabled = true;
            }

            if (TipoPedido == InOutType.Entrada)
            {
                this.Text += " de Compra";
                btnHistVenda.Text = "Hist.Compra";
            }
            else if (TipoPedido == InOutType.Saída)
            {
                this.Text += " de Venda";
                btnHistVenda.Text = "Hist.Venda";
            }

            var listCorreiosPrecoPrazo = CorreiosPrecoPrazoController.Instancia.GetPorIdPedido(Selecionado.ID);

            gcPrecosPrazos.DataSource = listCorreiosPrecoPrazo;

            txtPercComissao.Text = Selecionado.PercComissao.ToString();
            txtValorComissao.Text = Selecionado.ValorComissao.ToString();

            AtualizaPedidoNaTela();
            VerificarInsercaoDeItens();
            AtribuiTransportadora();
            AtribuiEnderecoEntrega(Selecionado.EnderecoEntrega);

            MascaraColunaCodigo();
            MascaraColunasSomenteLeitura();
            MascaraColunaQtd();
            MascaraColunaDesconto();
            

            AtribuiExemplosLkp();
            carregandoForm = false;

            VerificaPedidoImpressoFaturado();

            if (lkpFilial.Selecionado == null)
            {
                lkpFilial.CarregaPrimeiro();
                AtribuiFilial();
            }
            if (Operacao == Acao.Consultar)
            {
                btnDescontoGeral.Enabled = false;
                btnExcluiItem.Enabled = false;
                btnIncluir.Enabled = false;
                btnIncluirMais.Enabled = false;
            }

            PedidoItemEditavel.AtualizaTotais = new Action(AtualizaPedidoNaTela);
            PessoaOld = (Pessoa)lkpPessoa.Selecionado;

            SetaTabStopsDoXml(ArquivoConfiguracaoTabStop);

            vendedorOriginal = Selecionado.Vendedor;

            if (TipoPedido == InOutType.Entrada)
            {
                CamposVendedorHabilitados(false);
                vendedorAlterado = true;
                lkpVendedor.CwkValidacao = null;
            }
            else
                CamposVendedorHabilitados(true);

            // Attempts
            if (Operacao == Acao.Incluir)
                lkpVendedor.Properties.ReadOnly = false;

            var algo = ConfiguracaoController.Instancia.GetConfiguracao();
            if (algo.ComissaoPedido == 0)
            {
                labelControl33.Visible = false;
                txtPercComissao.Visible = false;
                txtValorComissao.Visible = false;
            }


            if (Operacao == Acao.Alterar)
            {
                try
                {
                    if (Selecionado.Pessoa.PessoaClientes[0].BBloqueiaVendedor)
                    {
                        lkpVendedor.EditValue = Selecionado.Pessoa.PessoaClientes[0].Vendedor;
                        if (cwkControleUsuario.Facade.getUsuarioLogado.Tipo == 1)
                        {
                            lkpVendedor.Enabled = false;
                            lkbVendedor.Enabled = false;
                        }

                    }
                    else
                    {
                        lkpVendedor.Enabled = true;
                        lkbVendedor.Enabled = true;
                    }
                }
                catch (Exception f)
                {
                    new Aplicacao.Base.FormErro(f).ShowDialog();
                }
            }
        }

        private bool BloqueaAlteracaoParcelas()
        {
            Pessoa cliente = new Pessoa();
            bool retorno = false;
            if (lkpPessoa.Selecionado != null)
            {
                cliente = PessoaController.Instancia.LoadObjectById(((Pessoa)lkpPessoa.Selecionado).ID);
                try
                {
                    if ((cliente.ID != 0) && (cliente.BCliente == true))
                    {
                        if (cliente.PessoaClientes.Count > 0)
                        {
                            if (cliente.PessoaClientes.FirstOrDefault().BBloqueiaCondicao == true)
                            {
                                lkpCondicao.Localizar(cliente.PessoaClientes.FirstOrDefault().Condicao.ID);
                                lkbCondicao.Enabled = false;
                                lkpCondicao.Enabled = false;
                                retorno = true;
                            }
                        }
                    }
                    return retorno;
                }
                catch (Exception)
                {
                    retorno = false;
                    return retorno;
                }
            }
            return retorno;
        }

        private void CamposVendedorHabilitados(bool visible)
        {
            lkpVendedor.Enabled = visible;
            lkbVendedor.Enabled = visible;
            lblVendedor.Enabled = visible;
            lblSenha.Enabled = visible;
            txtSenha.Enabled = visible;
        }

        private void VerificaPedidoImpressoFaturado()
        {
            if (Operacao != Acao.Consultar)
            {
                if (Selecionado.Status != StatusOrcamento.Aberto && Selecionado.Status != StatusOrcamento.AguardandoFaturamento)
                {
                    sbGravar.Visible = false;
                    MessageBox.Show("Orçamento/Pedido com status " + Selecionado.StatusExibicao + " não pode ser alterado. \nSomente consulta.", "Atenção.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else if ((GetConfiguracao().BloqAltPedImpresso && Selecionado.BImpressa && Modelo.cwkGlobal.objUsuarioLogado.Tipo != 2))
                {
                    sbGravar.Visible = false;
                    MessageBox.Show("Orçamento/Pedido já impresso. \nSomente consulta.", "Atenção.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void AtribuiExemplosLkp()
        {
            if (TipoPedido == InOutType.Entrada)
            {
                lkpPessoa.Exemplo = new Pessoa { BFornecedor = true };
                lkpPessoa.CamposRestricoesAND = new List<string> { "BFornecedor" };

                lkpTipoPedido.Exemplo = new TipoPedido { Ent_Sai = 1, Tipo = TipoPedidoType.Requisição };
                lkpTipoPedido.CamposRestricoesAND = new List<string> { "Ent_Sai", "!Tipo" };

            }
            else
            {
                lkpPessoa.Exemplo = new Pessoa { BCliente = true };
                lkpPessoa.CamposRestricoesAND = new List<string> { "BCliente" };

                lkpTipoPedido.Exemplo = new TipoPedido { Ent_Sai = 2, Tipo = TipoPedidoType.Requisição };
                lkpTipoPedido.CamposRestricoesAND = new List<string> { "Ent_Sai", "!Tipo" };
            }

            lkpVendedor.Exemplo = new Pessoa { BVendedor = true };
            lkpVendedor.CamposRestricoesAND = new List<string> { "BVendedor" };
            lkpPessoaTransportadora.Exemplo = new Pessoa { BTransportadora = true };
            lkpPessoaTransportadora.CamposRestricoesAND = new List<string> { "BTransportadora" };
        }

        private void MascaraColunasSomenteLeitura()
        {
            gvItems.Columns[0].OptionsColumn.AllowEdit = false;
            gvItems.Columns[4].OptionsColumn.AllowEdit = false;
            gvItems.Columns[7].OptionsColumn.AllowEdit = false;

            if (!this.GetConfiguracao().AlteracaoDescricaoProduto)
            {

                gvItems.Columns[2].OptionsColumn.AllowEdit = false;
            }

            if (Operacao != Acao.Incluir && !this.GetConfiguracao().PermitirAlteracaoVendedorPedido)
            {
                lkpVendedor.Properties.ReadOnly = true;
                lkbVendedor.Enabled = false;
            }

            txtTotalProduto.Properties.ReadOnly = true;
        }

        private void MascaraColunaQtd()
        {
            RepositoryItemTextEdit repositorio = new RepositoryItemTextEdit();

            repositorio.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            repositorio.EditFormat.FormatString = displayQtd;
            repositorio.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            repositorio.DisplayFormat.FormatString = displayQtd;

            repositorio.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
            repositorio.Mask.EditMask = "n0";

            gvItems.Columns[3].ColumnEdit = repositorio;
            gvItems.RefreshEditor(false);
        }

        private void MascaraColunaCodigo()
        {
            if (!ConfiguracaoController.Instancia.GetConfiguracao().CodigoProdutoStr)
            {
                RepositoryItemTextEdit repositorio = new RepositoryItemTextEdit();

                repositorio.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                repositorio.EditFormat.FormatString = "############";
                repositorio.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                repositorio.DisplayFormat.FormatString = "############";

                repositorio.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                repositorio.Mask.EditMask = "############";

                gvItems.Columns[1].ColumnEdit = repositorio;
                gvItems.Columns[1].AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far;
            }
        }

        private void MascaraColunaDesconto()
        {
            RepositoryItemTextEdit repositorio = new RepositoryItemTextEdit();

            repositorio.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            repositorio.EditFormat.FormatString = "n4";
            repositorio.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            repositorio.DisplayFormat.FormatString = "n4";

            repositorio.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
            repositorio.Mask.EditMask = "n4";

            gvItems.Columns[6].ColumnEdit = repositorio;
            gvItems.RefreshEditor(false);
        }       

        private List<ProdutoEditavel> TransformPedidoItem(IList<PedidoItem> pedidoItems)
        {
            List<ProdutoEditavel> retorno = new List<ProdutoEditavel>();
            foreach (var item in pedidoItems)
            {
                retorno.Add(new ProdutoEditavel(new PedidoItemEditavel(item), Selecionado.TabelaPreco, Selecionado.Condicao, Selecionado.TipoPedido));
            }

            return retorno;
        }

        private void AtualizaPedidoNaTela()
        {
            var config = ConfiguracaoController.Instancia.GetConfiguracao();

            decimal valorPedidoAntes = Selecionado.TotalPedido;

            if (config.ReducaoMagento == 1)
                Selecionado.CalculaTotalPedidoSemImpostos();
            else
                
                Selecionado.CalculaTotalPedido(config.NaoSomarFrete, config.NaoSomarIpiTotalNota);

            if (valorPedidoAntes != Selecionado.TotalPedido)
                AtualizaParcelas();

            txtTotalProduto.EditValue = Selecionado.TotalProduto;
            txtValorFrete.EditValue = Selecionado.ValorFrete;
            txtValorAcrescimo.EditValue = Selecionado.ValorAcrescimo;

            if (Selecionado.TotalST > 0)
                txtTotalST.EditValue = Selecionado.TotalST;
            else
                txtTotalST.EditValue = 0;

            txtTotalPedido.EditValue = Selecionado.TotalPedido;
            txtValorIPI.EditValue = Selecionado.TotalIPI;

            txtValorDesconto.EditValue = Selecionado.ValorDesconto;
            txtPercDesconto.EditValue = Selecionado.PercDesconto;
            txtTotalProduto.Refresh();

        
            
        }

        private void GerarParcelas()
        {
           
            if (Selecionado.Condicao != null && Selecionado.TotalPedido > 0)
            {
                Selecionado.Dt = txtDt.DateTime;
                Selecionado.DtPrazoEntrega = txtDtPrazoEntrega.DateTime;
                var parcelasNovas = CondicaoController.Instancia.GerarParcelas(Selecionado);
                Selecionado.Parcelas.Clear();

                foreach (var item in parcelasNovas)
                {
                    Selecionado.Parcelas.Add(item);
                }
            }
            else
            {
                Selecionado.Parcelas = new List<PedidoParcela>();
            }

            gcParcelas.DataSource = null;
            gcParcelas.DataSource = Selecionado.Parcelas;
            gvParcelas.RefreshData();
               
        }

        private void AtualizaParcelas()
        {

            if (Selecionado.Items.Count > 0)
            {
                AtualizaSTItems();
             }

            if (Selecionado.TipoPedido != null && Selecionado.TipoPedido.TipoNota != null)
            {
                if (Selecionado.Parcelas.Count > 0)
                    CondicaoController.Instancia.AtualizaParcelas(Selecionado);
                
                else if (Selecionado.TipoPedido != null)
                    GerarParcelas();

            }
            else
                return;

            gcParcelas.DataSource = null;
            gcParcelas.DataSource = Selecionado.Parcelas;
            gvParcelas.RefreshData();
        }

        #endregion

        #region Inserção de itens pelo grid

        private void gcItems_Enter(object sender, EventArgs e)
        {
            SetarErros(VerificarInsercaoDeItens());

            if (permiteInserirItens && this.Items.Count == 0)
            {
                AdicionaItem();
                Util.GridUtil.SetaFocoCelula(gvItems, 0, 1);
            }
        }

        private void gvItems_KeyDown(object sender, KeyEventArgs e)
        {
            if (permiteInserirItens && e.KeyCode == Keys.Tab && e.Modifiers != Keys.Shift)
            {
                if (EstahNaUltimaLinhaEUltimaColuna())
                {
                    if (!String.IsNullOrEmpty(this.Items.Last().Descricao))
                        AdicionaItem();
                }
            }

            if (Selecionado != null && gvItems.FocusedRowHandle >= 0)
            {
                TrataMascaraQtd(Selecionado.Items[gvItems.FocusedRowHandle]);
            }
        }

        private void gcItems_Leave(object sender, EventArgs e)
        {
            if (permiteInserirItens && String.IsNullOrEmpty(this.Items.Last().Descricao))
            {
                int indiceDeExclusao = this.Items.Count - 1; ;

                ExcluirItem(indiceDeExclusao);
            }

            CalculaDesconto();
        }

        private bool EstahNaUltimaLinhaEUltimaColuna()
        {
            GridColumn colunaSelecionada = gvItems.FocusedColumn;
            if (colunaSelecionada != null)
                return colunaSelecionada.VisibleIndex == 7 && gvItems.GetSelectedRows()[0] == Selecionado.Items.Count - 1;
            else
                return false;
        }

        private ProdutoEditavel AdicionaItem()
        {
            ProdutoEditavel ultimoItem;

            try
            {
                ultimoItem = this.Items.Last();
            }
            catch
            {
                ultimoItem = null;
            }

            if (ultimoItem == null || !String.IsNullOrEmpty(ultimoItem.Descricao))
            {
                PedidoItem pedidoItem = new PedidoItem();
                Selecionado.Items.Add(pedidoItem);

                pedidoItem.Pedido = Selecionado;
                pedidoItem.Sequencia = Selecionado.Items.Max(i => i.Sequencia) + 1;
                pedidoItem.Dt = Selecionado.Dt;
                pedidoItem.Ent_Sai = Selecionado.Ent_Sai;
                pedidoItem.PrazoEntrega = Selecionado.Dt;
                pedidoItem.bReservaEstoque = Selecionado.TipoPedido.BReservaEstoque;

                ProdutoEditavel pedidoDecorator = new ProdutoEditavel(new PedidoItemEditavel(pedidoItem), Selecionado.TabelaPreco, Selecionado.Condicao, Selecionado.TipoPedido);
                this.Items.Add(pedidoDecorator);
                gcItems.RefreshDataSource();

                alteracoesUnitariasAutorizadas = false;

                GridUtil.SetaFocoCelula(gvItems, this.Items.Count - 1, 0); 
                return pedidoDecorator;
            }
            else
                return ultimoItem;
        }

        #endregion

        #region Campos Totalizadores
        private void txtAcrescimo_Leave(object sender, EventArgs e)
        {
            Selecionado.ValorAcrescimo = Convert.ToDecimal(txtValorAcrescimo.EditValue);
            Selecionado.RecalcularRateios();
            AtualizaPedidoNaTela();
        }

        private void txtFrete_Leave(object sender, EventArgs e)
        {
            Selecionado.ValorFrete = Convert.ToDecimal(txtValorFrete.EditValue);
            Selecionado.RecalcularRateios();
            AtualizaPedidoNaTela();
        }
        #endregion

        #region Filial
        private void lkpFilial_Leave(object sender, EventArgs e)
        {
            AtribuiFilial();
        }

        private void AtribuiFilial()
        {
            if (lkpFilial.Selecionado != null)
            {
                Selecionado.Filial = (Filial)lkpFilial.Selecionado;
                VerificarInsercaoDeItens();
                VerificaNumero();
            }
        }
        #endregion

        #region Pessoa
        private void lkpPessoa_Leave(object sender, EventArgs e)
        {
            var retorno = BloqueaAlteracaoParcelas();
            if (!retorno)
            {
                lkbCondicao.Enabled = true;
                lkpCondicao.Enabled = true;
            }
            AtribuiPessoa();
            if ((((Pessoa)lkpPessoa.Selecionado).Endereco != "") && (((Pessoa)lkpPessoa.Selecionado).PessoaEnderecos.ToString() != ""))
            {
                try
                {
                    if (Selecionado.Pessoa != null && Selecionado.Pessoa.PessoaClientes[0].BBloqueiaVendedor)
                    {
                         lkpVendedor.EditValue = Selecionado.Pessoa.PessoaClientes[0].Vendedor;
                        if (cwkControleUsuario.Facade.getUsuarioLogado.Tipo == 1)
                        {
                            lkpVendedor.Enabled = false;
                            lkbVendedor.Enabled = false;
                        }
                    }
                    else
                    {
                        lkpVendedor.Enabled = true;
                        lkbVendedor.Enabled = true;
                    }
                }
                catch (Exception ez)
                {
                    new Aplicacao.Base.FormErro(ez).Show();
                }        
            }
            else
            {
                MessageBox.Show("O Cliente "+ Selecionado.Pessoa.Nome +" não tem endereço cadastrado. Por favor verifique!", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                lkpPessoa.EditValue = "";
            }
                       
        }

        private void AtribuiPessoa()
        {
            if (lkpPessoa.Selecionado != null && EhPessoaAtiva((Pessoa)lkpPessoa.Selecionado)
                && (PessoaOld != (Pessoa)lkpPessoa.Selecionado || atualizarPessoa))
            {
                Selecionado.Pessoa = PessoaController.Instancia.LoadObjectById(((Pessoa)lkpPessoa.Selecionado).ID);

                AtribuiEnderecoPessoa(Selecionado.Pessoa);
                Selecionado.PessoaCNPJCPF = Selecionado.Pessoa.CNPJ_CPF;
                Selecionado.PessoaInscRG = Selecionado.Pessoa.TipoPessoa == "Física" ? Selecionado.Pessoa.RG : Selecionado.Pessoa.Inscricao;
                Selecionado.PessoaNome = Selecionado.Pessoa.Nome;
                Selecionado.PessoaTelefone = Selecionado.Pessoa.TelefonePrincipal;

                if (Operacao == Acao.Incluir)
                {
                    if (Selecionado.Pessoa.PessoaClientes != null && Selecionado.Pessoa.PessoaClientes.Count > 0)
                        VerificaCamposCliente(Selecionado.Pessoa.PessoaClientes[0]);

                    if (Selecionado.Pessoa.PessoaAvisos != null && Selecionado.Pessoa.PessoaAvisos.Count > 0)
                        VerificaEExibeAvisos(Selecionado.Pessoa.Nome, Selecionado.Pessoa.PessoaAvisos);
                }
                VerificarInsercaoDeItens();
                PessoaOld = (Pessoa)lkpPessoa.Selecionado;
                atualizarPessoa = false;
               
              
               
            }
        }

        private bool EhPessoaAtiva(Pessoa pessoa)
        {
            if (!pessoa.BAtivo)
            {
                MessageBox.Show("Pessoa com cadastro inativo.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                lkpPessoa.EditValue = null;
                lkpPessoa.ID = 0;
                lkpPessoa.Text = "";

                lkpPessoa.Focus();
                return false;
            }
            else
                return true;
        }

        private void VerificaEExibeAvisos(string nomePessoa, IList<PessoaAviso> pessoaAvisos)
        {
            var avisosNaoVencidos = pessoaAvisos.Where(i => i.DtValidade >= DateTime.Today).ToList();

            if (avisosNaoVencidos.Count > 0)
            {
                StringBuilder avisos = new StringBuilder();
                foreach (var item in avisosNaoVencidos)
                {
                    avisos.AppendLine(item.Aviso);
                    avisos.AppendLine("----------");
                }

                FormMostraPessoaAviso frmAviso = new FormMostraPessoaAviso();
                frmAviso.Avisos = avisos;
                frmAviso.Cliente = nomePessoa;
                frmAviso.ShowDialog();
            }
        }

        private void VerificaCamposCliente(PessoaCliente pessoaCliente)
        {
            if (pessoaCliente.TabelaPreco != null)
            {
                lkpTabelaPreco.Localizar(pessoaCliente.TabelaPreco.ID);

                lkpTabelaPreco.Properties.ReadOnly = pessoaCliente.BBloqueiaCondicao;
                lkbTabelaPreco.Enabled = !pessoaCliente.BBloqueiaTabelaPreco;

                AtribuiTabelaPreco();
                lkpTabelaPreco.TabStop = false;
            }
            else
            {
                lkpTabelaPreco.Properties.ReadOnly = false;
                lkbTabelaPreco.Enabled = true;
                lkpTabelaPreco.TabStop = true;
            }

            if (pessoaCliente.Condicao != null)
            {
                lkpCondicao.Localizar(pessoaCliente.Condicao.ID);

                lkpCondicao.Properties.ReadOnly = pessoaCliente.BBloqueiaCondicao;
                lkbCondicao.Enabled = !pessoaCliente.BBloqueiaCondicao;

                AtribuiCondicao();
                lkpCondicao.TabStop = false;
            }
            else
            {
                lkpCondicao.Properties.ReadOnly = false;
                lkbCondicao.Enabled = true;
                lkpCondicao.TabStop = true;
            }

            if (pessoaCliente.Vendedor != null && lkpVendedor.Selecionado == null)
            {
                lkpVendedor.Localizar(pessoaCliente.Vendedor.ID);
                AtribuiVendedor();
            }
        }

        private void AtribuiEnderecoPessoa(Pessoa pessoa)
        {
            try
            {
                PessoaEndereco enderecoPrincipal = pessoa.EnderecoPrincipal();
                if (enderecoPrincipal.ID != 0)
                {
                    Selecionado.PessoaBairro = enderecoPrincipal.Bairro;
                    Selecionado.PessoaCEP = enderecoPrincipal.CEP;
                    Selecionado.PessoaCidade = enderecoPrincipal.Cidade.Nome;
                    Selecionado.PessoaEndereco = enderecoPrincipal.Endereco;
                    if (!String.IsNullOrEmpty(enderecoPrincipal.Numero))
                        Selecionado.PessoaEndereco += ", " + enderecoPrincipal.Numero;
                    Selecionado.PessoaUF = enderecoPrincipal.Cidade.UF.Sigla;
                }
            }
            catch
            {
                throw new Exception("Erro ao recuperar os dados do cliente, favor conferir o cadastro do endereço principal deste cliente.");
            }
        }

        private void AtribuiEnderecoEntrega(PessoaEndereco pessoaEnderecoSelecionado)
        {
            if (pessoaEnderecoSelecionado != null)
            {
                Selecionado.EnderecoEntrega = pessoaEnderecoSelecionado;

                txtEntregaRua.Text = pessoaEnderecoSelecionado.Endereco;
                txtEntregaBairro.Text = pessoaEnderecoSelecionado.Bairro;
                txtEntregaCep.Text = pessoaEnderecoSelecionado.CEP;

                if (pessoaEnderecoSelecionado.Cidade != null)
                    txtEntregaCidade.Text = pessoaEnderecoSelecionado.Cidade.ToString();
                else
                    txtEntregaCidade.Text = "";

                txtEntregaComplemento.Text = pessoaEnderecoSelecionado.Complemento;
                txtEntregaNumero.Text = pessoaEnderecoSelecionado.Numero;
            }
        }
        #endregion

        #region Tabela de Preço
        private void lkpTabelaPreco_Leave(object sender, EventArgs e)
        {
            AtribuiTabelaPreco();
        }

        private void AtribuiTabelaPreco()
        {
            if (lkpTabelaPreco.Selecionado != null)
            {
                Selecionado.TabelaPreco = (TabelaPreco)lkpTabelaPreco.Selecionado;
                VerificarInsercaoDeItens();
            }
        }
        #endregion

        #region Vendedor
        private void lkpVendedor_Leave(object sender, EventArgs e)
        {
            AtribuiVendedor();
            RequisitaSenhaVendedor();
        }

        private void AtribuiVendedor()
        {
            var vendedor = (Pessoa)lkpVendedor.Selecionado;            
            if (vendedor != null)
            {
                if (Selecionado.Vendedor != null && Selecionado.Vendedor.ID != vendedor.ID)
                    vendedorAlterado = false;
                Selecionado.IDVendedor = vendedor.PessoaVendedores[0].ID;
            }
            Selecionado.Vendedor = vendedor;
            VerificarInsercaoDeItens();
        }
        #endregion

        #region Condição
        private void AtribuiCondicao()
        {
            if (lkpCondicao.Selecionado != null)
            {
                Condicao condicaoNova = (Condicao)lkpCondicao.Selecionado;
                Condicao condicaoAntiga = Selecionado.Condicao;

                Selecionado.Condicao = condicaoNova;

                  if (condicaoAntiga != null && condicaoNova.ID != condicaoAntiga.ID)
                {
                    GerarParcelas();

                    if (Selecionado.TipoPedido.bRecalcula == 1 || Selecionado.Condicao.Variacao != 0)
                    {
                        Items.ForEach(it => it.recalcula = true);
                        Items.ForEach(it => it.Condicao = condicaoNova);
                        //donoProduto.ValorOriginal = ProdutoController.Instancia.getPreco(donoProduto.Produto.PrecoBase, tabelaPrecoProduto.MargemLucro, tabelaPrecoProduto.PAcrescimo, tabelaPrecoProduto.PDesconto, TipoPrecoType.Normal) * (1 + Condicao.Variacao / 100);
                    }
                    else
                        Items.ForEach(it => it.recalcula = false);                    
                }

                gvItems.RefreshData();
                VerificarInsercaoDeItens();
            }
        }

        private void lkpCondicao_Leave(object sender, EventArgs e)
        {
            AtribuiCondicao();
        }
        #endregion

        #region TipoPedido
        private void lkpTipoPedido_Leave(object sender, EventArgs e)
        {
            AtribuiTipoPedido();
        }

        private void AtribuiTipoPedido()
        {
            if (lkpTipoPedido.Selecionado != null)
            {
                Selecionado.TipoPedido = (TipoPedido)lkpTipoPedido.Selecionado;
                Selecionado.Ent_Sai = Selecionado.TipoPedido.Ent_Sai;
                VerificarInsercaoDeItens();
                VerificaNumero();

                if (Operacao == Acao.Incluir)
                {
                    Selecionado.Observacao2 = Selecionado.TipoPedido.Observacao;
                    txtObservacao2.Text = Selecionado.Observacao2;
                }

                foreach (var item in Selecionado.Items)
                    item.bReservaEstoque = Selecionado.TipoPedido.BReservaEstoque;

                AtualizaParcelas();
            }
        }

        private void AtualizaSTItems()
        {
            var config = ConfiguracaoController.Instancia.GetConfiguracao();
            if (Selecionado.Filial != null && Selecionado.TipoPedido != null && Selecionado.TipoPedido.CalcularST)
            {
                Selecionado.RecalcularRateios();
                foreach (var item in Selecionado.Items)
                {
                    if (item.Produto != null)
                    {
                        var tributacao = new Tributacao(new PedidoItemTributadoMediator(item, Selecionado));
                    
                        tributacao.CalculaIcms();
                    }
                }
            }
            else
            {
                foreach (var item in Selecionado.Items)
                {
                    item.ValorRetidoICMS = 0;
                    item.BaseICMSSubst = 0;
                }
            }

            if (config.ReducaoMagento == 1)
                Selecionado.CalculaTotalPedidoSemImpostos();
            else
                Selecionado.CalculaTotalPedido(config.NaoSomarFrete, config.NaoSomarIpiTotalNota);
            
            if (Selecionado.TotalST > 0)
                txtTotalST.EditValue = Selecionado.TotalST;
            else
                txtTotalST.EditValue = 0;

            txtTotalPedido.EditValue = Selecionado.TotalPedido;
        }
        #endregion

        private void VerificaNumero()
        {
            if (Selecionado.Filial != null && Selecionado.TipoPedido != null && Operacao == Acao.Incluir)
            {
                Selecionado.Numero = PedidoController.Instancia.MaxNumero(Selecionado.Filial, Selecionado.TipoPedido);
                txtNumero.Text = Selecionado.Numero.ToString();
            }
        }

        #region Excluir
        private void btnExcluiItem_Click(object sender, EventArgs e)
        {
            int indiceDeExclusao = gvItems.FocusedRowHandle;

            ExcluirItem(indiceDeExclusao);
        }

        private void ExcluirItem(int indiceDeExclusao)
        {
            if (indiceDeExclusao >= 0 && indiceDeExclusao < this.Selecionado.Items.Count)
            {
                this.Items.RemoveAt(indiceDeExclusao);
                Selecionado.Items.RemoveAt(indiceDeExclusao);
                gvItems.RefreshData();

                AtualizaPedidoNaTela();
            }
        }
        #endregion

        #region Incluir Mais
        private void btnIncluirMais_Click(object sender, EventArgs e)
        {
            try
            {
                GridProdutoGenMais grid = new GridProdutoGenMais(new List<Produto>(), FormProdutoFactory.GetFormProduto());
                grid.Text = "Tabela de Produto";
                if (cwkControleUsuario.Facade.ControleAcesso(grid))
                {
                    grid.ShowDialog();
                    AdicionarMais(grid.ProdutosSelecionados);
                }
            }
            catch (Exception ex)
            {
                new FormErro(ex).ShowDialog();
            }
        }

        private void AdicionarMais(IList<Produto> produtos)
        {
            if (produtos.Count > 0)
            {
                var produtosSemTabelaPreco = new List<Produto>();
                foreach (Produto item in produtos)
                {
                    try
                    {
                        ProdutoEditavel pedidoItem = AdicionaItem();
                        pedidoItem.IDProduto = item.ID;
                    }
                    catch (TabelaPrecoProdutoException ex)
                    {
                        produtosSemTabelaPreco.Add(item);
                    }
                }

                SelecionaQtdPrimeiroItemMais(produtos.Count);
                gvItems.Focus();

                if (produtosSemTabelaPreco.Count > 0)
                {
                    throw new TabelaPrecoProdutoException(produtosSemTabelaPreco);
                }
            }
        }

        private void SelecionaQtdPrimeiroItemMais(int qtdItensInseridos)
        {
            int linhaPrimeiroItem = this.Items.Count - qtdItensInseridos;
            linhaPrimeiroItem = linhaPrimeiroItem < 0 ? 0 : linhaPrimeiroItem;

            GridUtil.SetaFocoCelula(gvItems, linhaPrimeiroItem, 3);
        }


        #endregion

        #region Liberação de inserção de itens
        private IDictionary<Control, string> VerificarInsercaoDeItens()
        {
            IDictionary<Control, string> retorno = new Dictionary<Control, string>();
            string mensagem = "Campo obrigatório para inserção de itens.";

            permiteInserirItens = true;

            if (Selecionado.Filial == null)
            {
                retorno.Add(lkpFilial, mensagem);
                permiteInserirItens = false;
            }
            else retorno.Add(lkpFilial, "");

            if (Selecionado.Pessoa == null)
            {
                retorno.Add(lkpPessoa, mensagem);
                permiteInserirItens = false;
            }
            else retorno.Add(lkpPessoa, "");

            if (Selecionado.TipoPedido == null)
            {
                retorno.Add(lkpTipoPedido, mensagem);
                permiteInserirItens = false;
            }
            else retorno.Add(lkpTipoPedido, "");

            if (Selecionado.TabelaPreco == null)
            {
                retorno.Add(lkpTabelaPreco, mensagem);
                permiteInserirItens = false;
            }
            else retorno.Add(lkpTabelaPreco, "");

            if (Selecionado.Condicao == null)
            {
                retorno.Add(lkpCondicao, mensagem);
                permiteInserirItens = false;
            }
            else retorno.Add(lkpCondicao, "");

            if (Selecionado.Vendedor == null && TipoPedido == InOutType.Saída)
            {
                retorno.Add(lkpVendedor, mensagem);
                permiteInserirItens = false;
            }
            else retorno.Add(lkpVendedor, "");

            if (Operacao != Acao.Consultar && Operacao != Acao.Excluir)
                LiberarBotoesItens(permiteInserirItens);

            return retorno;

        }

        private void LiberarBotoesItens(bool permiteInserirItens)
        {
            btnIncluir.Enabled = permiteInserirItens;
            btnIncluirMais.Enabled = permiteInserirItens;
            btnDescontoGeral.Enabled = permiteInserirItens;
            btnExcluiItem.Enabled = permiteInserirItens;
        }
        #endregion

        #region Descontos
        private void SetaDesconto(ProdutoEditavel pedidoItemDecorator, decimal valor, bool usuarioEhGerente)
        {
            try
            {
                pedidoItemDecorator.TrySetDesconto(valor);
            }
            catch (DescontoException exc)
            {
                if (usuarioEhGerente)
                    pedidoItemDecorator.SetDescontoPeloGerente(valor);
                else
                    throw exc;
            }
        }

        private void gvItems_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {

            ProdutoEditavel pedidoItemDecorator = this.Items[e.RowHandle];

            decimal percDesconto = 0;
            if (e.Column.Caption == "Desc %")
            {
                percDesconto = Convert.ToDecimal(e.Value);
                TrataDescontoIndividual(pedidoItemDecorator, percDesconto);
            }
            else if (e.Column.Caption == "Preço")
            {
                percDesconto = pedidoItemDecorator.PercDescontoComNovoValor();
                TrataDescontoIndividual(pedidoItemDecorator, percDesconto);
            }
        }

        private void TrataMascaraQtd(PedidoItem pedidoItem)
        {
            if (pedidoItem.Produto != null)
            {
                string editMask = "";

                if (pedidoItem.Produto.Unidade.BQtdFracionada)
                    editMask = "n4";
                else
                    editMask = "n0";

                ((RepositoryItemTextEdit)gvItems.Columns[3].ColumnEdit).Mask.EditMask = editMask;

                ((RepositoryItemTextEdit)gvItems.Columns[3].ColumnEdit).EditFormat.FormatString = displayQtd;
                ((RepositoryItemTextEdit)gvItems.Columns[3].ColumnEdit).DisplayFormat.FormatString = displayQtd;

                gvItems.RefreshEditor(false);
            }
        }

        private void TrataDescontoIndividual(ProdutoEditavel pedidoItemDecorator, decimal percDesconto)
        {
            bool usuarioEhGerente = cwkControleUsuario.Facade.getUsuarioLogado.Tipo == 2;
            try
            {
                SetaDesconto(pedidoItemDecorator, percDesconto, usuarioEhGerente);
            }
            catch (DescontoException exc)
            {
                if (RequisitaGerente())
                {
                    SetaDesconto(pedidoItemDecorator, percDesconto, true);
                    ((PedidoItemEditavel)pedidoItemDecorator.donoProduto).PedidoItem.Gerente = UltimoLoginGerente;
                }
                else
                {
                    SetaDesconto(pedidoItemDecorator, 0m, false);
                }
            }
            UltimoLoginGerente = "";

        }

        private void btnDescontoGeral_Click(object sender, EventArgs e)
        {
            if (btnDescontoGeral.Size.Width == 107)
            {
                btnDescontoGeral.Size = new Size(26, 23);

                txtDescontoGeral.EditValue = 0M;
                txtDescontoGeral.Visible = true;
                txtDescontoGeral.Enabled = true;
                txtDescontoGeral.Focus();
            }
        }

        private void txtDescontoGeral_Leave(object sender, EventArgs e)
        {
            if (txtDescontoGeral.Enabled) //o componente dispara esse evento quando desabilita ele, desta forma só chama uma vez
            {
                btnDescontoGeral.Size = new Size(107, 23);
                txtDescontoGeral.Visible = false;
                txtDescontoGeral.Enabled = false;

                decimal percDesconto = Convert.ToDecimal(txtDescontoGeral.EditValue);

                if (percDesconto >= 0)
                {
                    if (percDesconto >= 100)
                    {
                        percDesconto = 99;
                    }

                    AtualizaDescontoGeral(percDesconto);
                }
                txtDescontoGeral.EditValue = 0M;
            }

            CalculaDesconto();
        }

        private void AtualizaDescontoGeral(decimal percDesconto)
        {
            DescontoException excecaoGeral = SetaDesconto(percDesconto);

            if (excecaoGeral != null)
            {
                VerificaLoginGerente(percDesconto, excecaoGeral);
            }

            gvItems.RefreshData();
        }

        private void VerificaLoginGerente(decimal percDesconto, DescontoException excecaoGeral)
        {
            string mensagemDeErro = "Os seguintes itens estouram o valor mínimo: " + Environment.NewLine +
                FormErro.MontaMensagemComQuebraLinha(excecaoGeral) + Environment.NewLine +
                Environment.NewLine +
                "Deseja continuar?";

            DialogResult resultadoMBox = MessageBox.Show(mensagemDeErro, "Atenção", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (resultadoMBox == DialogResult.Yes)
            {
                if (RequisitaGerente())
                {
                    SetaDesconto(percDesconto, true);
                }
                else
                {
                    SetaDesconto(0, false);
                }
            }
            UltimoLoginGerente = "";
        }

        private void SetaDesconto(decimal percDesconto, bool ehGerente)
        {
            foreach (var item in this.Items)
            {
                SetaDesconto(item, percDesconto, ehGerente);
                ((PedidoItemEditavel)item.donoProduto).PedidoItem.Gerente = UltimoLoginGerente;
            }
        }

        private DescontoException SetaDesconto(decimal percDesconto)
        {
            DescontoException excecaoGeral = null;
            foreach (var item in this.Items)
            {
                try
                {
                    SetaDesconto(item, percDesconto, false);
                }
                catch (DescontoException exc)
                {
                    excecaoGeral = excecaoGeral == null ? exc : new DescontoException(exc.Message, excecaoGeral);
                }
            }
            return excecaoGeral;
        }
        #endregion

        string UltimoLoginGerente = "";

        private bool RequisitaGerente()
        {
            Modelo.Cw_Usuario usuarioLogado = Modelo.cwkGlobal.objUsuarioLogado;
            if (cwkControleUsuario.Facade.getUsuarioLogado.Tipo == 2 || cwkControleUsuario.Facade.LoginGerente())
            {
                UltimoLoginGerente = Selecionado.GerenteDesconto = cwkControleUsuario.Facade.UltimoLoginGerente;
                Modelo.cwkGlobal.objUsuarioLogado = usuarioLogado;
                return true;
            }
            else
            {
                Selecionado.GerenteDesconto = String.Empty;
                return false;
            }
        }

        private void btnInfAdicionais_Click(object sender, EventArgs e)
        {
            int indiceSelecionado = gvItems.FocusedRowHandle;

            if (gvItems.IsValidRowHandle(indiceSelecionado))
            {
                new FormInformacoesAdicionais(Selecionado.Items[indiceSelecionado]).ShowDialog();
            }
        }

        private void btnHistVenda_Click(object sender, EventArgs e)
        {

            if (Selecionado.Pessoa != null)
            {
                int indiceSelecionado = gvItems.FocusedRowHandle;



                if (gvItems.IsValidRowHandle(indiceSelecionado))
                {
                    new FormHistoricoVenda(Selecionado.Pessoa, Selecionado.Items[indiceSelecionado].Produto, TipoPedido, FormHistoricoVenda.FiltroPor.Pessoa).ShowDialog();
                }
                else
                {
                    new FormHistoricoVenda(Selecionado.Pessoa, null, TipoPedido, FormHistoricoVenda.FiltroPor.Pessoa).ShowDialog();
                }
            }
        }

        private void txtTotalPedido_EditValueChanged(object sender, EventArgs e)
        {
            if (!vendedorAlterado && !alteracoesUnitariasAutorizadas && !carregandoForm)
            {
                sbGravar.Enabled = false;
                txtSenha.Focus();
            }
        }

        private void LiberarBotaoGravar()
        {
            if (Operacao != Acao.Consultar && Operacao != Acao.Excluir)
                sbGravar.Enabled = vendedorAlterado || alteracoesUnitariasAutorizadas;
            else
                sbGravar.Enabled = false;
        }

        private void txtSenha_Leave(object sender, EventArgs e)
        {
            RequisitaSenhaVendedor();
        }

        private void RequisitaSenhaVendedor()
        {
            if (Selecionado.Vendedor != null)
            {
                sbGravar.Enabled = false;
                PessoaVendedor vendedor = Selecionado.Vendedor.PessoaVendedores[0];
                if (!String.IsNullOrEmpty(vendedor.Senha))
                {
                    string senhaDigitada = txtSenha.Text;

                    if (senhaDigitada == vendedor.Senha)
                    {
                        if (Selecionado.ID == 0 || vendedorOriginal != Selecionado.Vendedor)
                            vendedorAlterado = true;

                        if (this.GetConfiguracao().PermitirAlteracaoVendedorPedido)
                        {
                            alteracoesUnitariasAutorizadas = true;
                            txtSenha.Text = "";
                        }
                        else
                        {
                            vendedorAlterado = true;
                        }
                    }
                    else
                    {
                        if (!vendedorAlterado)
                            txtSenha.Focus();
                    }
                }
                else
                {
                    vendedorAlterado = true;
                }
                LiberarBotaoGravar();
            }
        }

        private void txtSenha_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F5)
            {
                if (Operacao != Acao.Incluir && !GetConfiguracao().PermitirAlteracaoVendedorPedido)
                {
                    if (RequisitaGerente())
                    {
                        this.vendedorAlterado = true;
                    }
                }
                else
                {
                    lkbVendedor.PerformClick();
                }
            }
        }

        private void lkbVendedor_Click(object sender, EventArgs e)
        {
            if (Operacao != Acao.Incluir && !GetConfiguracao().PermitirAlteracaoVendedorPedido)
                return;

            GridGenerica<Pessoa> grid = new GridGenerica<Pessoa>(PessoaController.Instancia.GetByExample(lkpVendedor.GetCriterion()), new FormPessoa(), (Pessoa)lkpVendedor.Selecionado);
            grid.Selecionando = true;
            if (cwkControleUsuario.Facade.ControleAcesso(grid))
                grid.ShowDialog();
            if (grid.Selecionado != null)
                lkpVendedor.EditValue = grid.Selecionado;
            AtribuiVendedor();
        }

        private Configuracao GetConfiguracao()
        {
            return ConfiguracaoController.Instancia.GetConfiguracao();
        }

        protected override void OK()
        {
            try
            {
                if (ValidarFormulario())
                {
                    TelaProObjeto(this.tcPrincipal);

                    if (Operacao == Acao.Incluir)
                        Selecionado.bRealizouRotinaCorreios = false;

                    try
                    {
                        if (Selecionado.TipoPedido.Status > 0)
                        {
                            if (Selecionado.Status != StatusOrcamento.AguardandoFaturamento)
                                Selecionado.Status = (StatusOrcamento)Selecionado.TipoPedido.Status;
                        }
                    }
                    catch (Exception)
                    {
                        
                        new Aplicacao.Base.FormErro("Não há um Tipo de pedido selecionado. Verifique","").ShowDialog();
                        return;
                    }


                    Selecionado.LocalEstoquePedido = Selecionado.TipoPedido.TipoNota.LocalEstoqueTipoNota;
                    Selecionado.RecalcularRateios();

                    
                    if (Selecionado.TipoPedido.BLimiteCredito)
                        if (!ValidaLimiteCredito(Selecionado))
                        {
                            MessageBox.Show("O cliente não possui limite de crédito para faturar este orçamento. O status será alterado para \"Aguardando Aprovação\".", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            Selecionado.Status = StatusOrcamento.AguardandoAprovacao;
                        }

                    VerificarEstoqueNegativo();

                    //controller.Salvar(Selecionado, Operacao);
                   
                    //Selecionado.ValorComissao = Convert.ToDecimal(txtValorComissao.Text);
                    var primeriaParcela = Selecionado.Parcelas.Where(n => n.Parcela == 1).FirstOrDefault();
                    if (primeriaParcela.TipoDocumento != null)
                    {
                        Selecionado.primeiraParcela = primeriaParcela.TipoDocumento.Nome;
                        PedidoController.Instancia.Salvar(Selecionado, Operacao);
                    }
                    
                    if ((Selecionado.Pessoa.BAtivo || GetConfiguracao().ImprimirOrcClienteNaoAtivo) && Operacao == Acao.Incluir)
                    {
                        new FormDialogo(Selecionado).ShowDialog();
                    }



	                
                   
                    this.Close();
                }
            }
            catch (Exception exc)
            {
                new FormErro(exc).ShowDialog();
            }
        }

        public bool ValidaLimiteCredito(Pedido pedido)
        {
            IList<Documento> documentos = DocumentoController.Instancia.GetAllAbertosPorCliente(pedido.Pessoa);
            IList<PessoaCliente> pessoaCliente = PessoaController.Instancia.GetByFantasia(pedido.Pessoa.Fantasia).PessoaClientes;

            decimal valorTotalDocumentos = 0m;

            foreach (var item in documentos)
                valorTotalDocumentos += item.Valor;

            valorTotalDocumentos += Selecionado.TotalPedido;

            if (valorTotalDocumentos > pessoaCliente[0].LimiteCredito)
                return false;

            return true;
        }

        private void VerificarEstoqueNegativo()
        {
            var _tipoPedido = TipoPedidoController.Instancia.LoadObjectById(((TipoPedido)lkpTipoPedido.Selecionado).ID);
            var _tipoNota = TipoNotaController.Instancia.LoadObjectById(_tipoPedido.TipoNota.ID);

            //if (!(Selecionado.TipoPedido.BReservaEstoque && !Selecionado.TipoPedido.BPermiteEstoqueNegativo))
            // return;

            foreach (var item in Selecionado.Items)
            {
                IList<pxyEstoque> listaEstoque = ProdutoController.Instancia.GetListaEstoque(item.Produto.ID, 0, Selecionado.ID);
                var estoque = listaEstoque.Where(w => w.LocalEstoque == Selecionado.LocalEstoquePedido.Descricao.ToUpper()).FirstOrDefault();
                var quantidade = item.Quantidade;
                if (Selecionado.Ent_Sai == 2)
                    quantidade = quantidade * -1;

                if (estoque == null)
                {
                    string erro = System.Environment.NewLine + "Verificar quanto à presença do produto em estoque." + System.Environment.NewLine;
                    erro += "O produto:" + System.Environment.NewLine + item.ProdutoNome + System.Environment.NewLine + " não possui itens em estoque.";
                    throw new Exception(erro);
                }
                if ((estoque.Saldo + quantidade) < 0)
                {
                    if (_tipoNota.BPermiteEstqueNegativo == false)
                    {
                        var mensagem = String.Format("O estoque do produto {0} ficará negativo. Operação não permitida.", item.ProdutoNome);

                    }
                }
            }
            return;
        }

        protected override bool ValidarFormulario()
        {
            //bool valida = base.ValidarFormulario();
            bool ValidaData = false;
            if (!EhSomaParcelasIgualTotalPedido())
                dxErroProvider.SetError(txtTotalPedido, "Soma dos valores das parcelas difere do valor total.");
            else
                dxErroProvider.SetError(txtTotalPedido, "");
            if (txtDt.DateTime > txtDtPrazoEntrega.DateTime)
            {
                dxErroProvider.SetError(txtDtPrazoEntrega, "O prazo de entrega deve ser maior que a data do orçamento.");
                ValidaData = false;
            }
            else
            {
                dxErroProvider.SetError(txtDtPrazoEntrega, "");
                ValidaData = true;
            }
            if (Selecionado.TipoPedido != null && Selecionado.TipoPedido.TipoNota == null)
            {
                dxErroProvider.SetError(lkpTipoPedido, "Tipo nota não cadastrado dentro do tipo do orçamento.");
                //valida = false;
            }

            return EhSomaParcelasIgualTotalPedido() && ValidaData;
        }

        private bool EhSomaParcelasIgualTotalPedido()
        {
            return Selecionado.Parcelas.Sum(i => i.Valor) == Selecionado.TotalPedido;
        }

        private void FormOrcamento_KeyDown(object sender, KeyEventArgs e)
        {

            switch (e.KeyCode)
            {
                case Keys.Insert: if (btnIncluir.Enabled) btnIncluir.PerformClick(); break;
                case Keys.Delete: if (e.Modifiers == Keys.Control) if (btnExcluiItem.Enabled) btnExcluiItem.PerformClick(); break;
                case Keys.F9: if (sbGravar.Enabled) sbGravar.PerformClick(); break;
                case Keys.F2: if (btnIncluirMais.Enabled) btnIncluirMais.PerformClick(); break;
                case Keys.F3: if (btnDescontoGeral.Enabled) btnDescontoGeral.PerformClick(); break;
                case Keys.P: if (e.Modifiers == Keys.Alt)
                    {
                        lkpPessoa.Focus();
                        lkpPessoa.SelectAll();
                    }
                    break;
            }
        }

        private void btnIncluir_Click(object sender, EventArgs e)
        {
            SetarErros(VerificarInsercaoDeItens());

            if (permiteInserirItens)
                if (this.Items.Count == 0 || !String.IsNullOrEmpty(this.Items.Last().Descricao))
                {
                    AdicionaItem();
                    gvItems.Focus();
                    GridUtil.SetaFocoCelula(gvItems, this.Items.Count - 1, 1);
                }
        }

        private void lkbPessoa_Click(object sender, EventArgs e)
        {
            IList<Pessoa> pessoas;
            GridCliente grid;
            if (TipoPedido == InOutType.Saída)
            {
                pessoas = PessoaController.Instancia.GetAllClientes();
                grid = new GridCliente(pessoas, new FormPessoa(), (Pessoa)lkpPessoa.Selecionado, "Cliente");
            }
            else
            {
                pessoas = PessoaController.Instancia.GetAllFornecedores();
                grid = new GridCliente(pessoas, new FormPessoa(), (Pessoa)lkpPessoa.Selecionado, "Fornecedor");
            }

            grid.Selecionando = true;
            if (cwkControleUsuario.Facade.ControleAcesso(grid))
                grid.ShowDialog();

            if (grid.Selecionado != null)
            {
                lkpPessoa.Localizar(grid.Selecionado.ID);
            }
            lkpPessoa.Focus();
        }

        private void lkbProjeto_Click(object sender, EventArgs e)
        {
            GridGenerica<cwkGestao.Modelo.ProjetoOP> grid = new GridGenerica<cwkGestao.Modelo.ProjetoOP>(cwkGestao.Negocio.ProjetoController.Instancia.GetCentrosDeCustoEProjetosAprovados(), null);
            grid.Selecionando = true;
            grid.EsconderBotoes(GridGenerica<ProjetoOP>.Botao.Incluir | GridGenerica<ProjetoOP>.Botao.Alterar | GridGenerica<ProjetoOP>.Botao.Excluir | GridGenerica<ProjetoOP>.Botao.Consultar);

            if (cwkControleUsuario.Facade.ControleAcesso(grid))
                grid.ShowDialog();
            if (grid.Selecionado != null)
            {
                lkpProjeto.ID = Convert.ToInt32(grid.Selecionado.Codigo);
                lkpProjeto.Localizar(lkpProjeto.ID);
            }
            lkpProjeto.Focus();
        }

        private void lkbTipoPedido_Click(object sender, EventArgs e)
        {
            GridGenerica<TipoPedido> grid = new GridGenerica<TipoPedido>(TipoPedidoController.Instancia.GetByExample(lkpTipoPedido.GetCriterion()), new FormTipoPedido(TipoPedido), (TipoPedido)lkpTipoPedido.Selecionado);
            grid.Selecionando = true;
            if (cwkControleUsuario.Facade.ControleAcesso(grid))
                grid.ShowDialog();

            if (grid.Selecionado != null)
            {
                lkpTipoPedido.Localizar(grid.Selecionado.ID);
            }
            lkpTipoPedido.Focus();

            if ((TipoPedido)lkpTipoPedido.Selecionado != null)
            {
                _tipoPedido = TipoPedidoController.Instancia.LoadObjectById(((TipoPedido)lkpTipoPedido.Selecionado).ID);

                var _tipoNota = TipoNotaController.Instancia.LoadObjectById(_tipoPedido.TipoNota.ID);

                switch (_tipoNota.TipoFrete)
                {
                    case -1:
                        cbTipoFrete.SelectedIndex = 0;
                        break;

                    case 0:
                        cbTipoFrete.SelectedIndex = 0;
                        break;

                    case 1:
                        cbTipoFrete.SelectedIndex = 1;
                        break;

                    case 2:
                        cbTipoFrete.SelectedIndex = 2;
                        break;

                    case 9:
                        cbTipoFrete.SelectedIndex = 3;
                        break;

                    default:
                        cbTipoFrete.SelectedIndex = 0;
                        break;
                }
            }
        }

         
        #region Transportadora
        private void lkpPessoaTransportadora_Leave(object sender, EventArgs e)
        {
            AtribuiTransportadora();
        }

        private void AtribuiTransportadora()
        {
            if (Selecionado != null)
            {
                Pessoa p = null;
                if (Selecionado.PessoaTransportadora != null)
                {
                    p = PessoaController.Instancia.LoadObjectById(Selecionado.PessoaTransportadora.ID);
                }
                if (lkpPessoaTransportadora.Selecionado != null)
                {
                    p = PessoaController.Instancia.LoadObjectById(((Pessoa)lkpPessoaTransportadora.Selecionado).ID);
                }
                if (p != null)
                {
                    txtTransNome.Text = (p.Nome != null) || (p.Nome != "") ? p.Nome : Selecionado.TransNome;
                    txtTransPlaca.Text = (p.Placa != null) || (p.Placa != "") ? p.Placa : Selecionado.TransPlaca;
                    txtTransPlacaUf.Text = (p.PlacaUF != null) || (p.PlacaUF != "") ? p.PlacaUF : Selecionado.TransPlacaUF;
                    txtTransEndereco.Text = (p.Endereco != null) || (p.Endereco != "") ? p.Endereco : Selecionado.TransEndereco;
                    txtTransCnpj.Text = (p.CNPJ_CPF != null) || (p.CNPJ_CPF != "") ? p.CNPJ_CPF : Selecionado.TransCNPJCPF;
                    txtTransCidade.Text = (p.Cidade != null) || (p.Cidade != "") ? p.Cidade : Selecionado.TransCidade;
                }

            }
            else
            {
                Selecionado.PessoaTransportadora = null;
                txtTransNome.Text = "";
                txtTransPlaca.Text = "";
                txtTransPlacaUf.Text = "";
                txtTransEndereco.Text = "";
                txtTransCnpj.Text = "";
                txtTransCidade.Text = "";
            }
        }

        private void lkbPessoaTransportadora_Click(object sender, EventArgs e)
        {
            IList<Pessoa> pessoas = PessoaController.Instancia.GetAllTransportadoras();
            GridCliente grid = new GridCliente(pessoas, new FormPessoa(), (Pessoa)lkpPessoaTransportadora.Selecionado, "Transportadora");

            grid.Selecionando = true;
            grid.ShowDialog();
            lkpPessoaTransportadora.EditValue = grid.Selecionado;
            lkpPessoaTransportadora.Focus();
        }

        #endregion

        protected override List<Exception> ObjetoPraTela(Control pai)
        {
            List<Exception> retorno = base.ObjetoPraTela(pai);

            if (Operacao == Acao.Incluir)
                txtCodigo.EditValue = PedidoController.Instancia.CodigoDisponivelPedido();

            switch (Selecionado.TipoFrete)
            {
                case TipoFrete.Emitente: cbTipoFrete.SelectedIndex = 0; break;
                case TipoFrete.Destinatario: cbTipoFrete.SelectedIndex = 1; break;
                case TipoFrete.Terceiros: cbTipoFrete.SelectedIndex = 2; break;
                case TipoFrete.SemFrete: cbTipoFrete.SelectedIndex = 3; break;
            }
            txtObservacao1.Text = Selecionado.Observacao1;
            txtObservacao2.Text = Selecionado.Observacao2;
            txtObservacao3.Text = Selecionado.Observacao3;

            txtObservacao1Licitacao.Text = Selecionado.Observacao1Licitacao;
            txtObservacao2Licitacao.Text = Selecionado.Observacao2Licitacao;

            return retorno;
        }

        protected override void TelaProObjeto(Control pai)
        {
            base.TelaProObjeto(pai);
            switch (cbTipoFrete.SelectedIndex)
            {
                case 0: Selecionado.TipoFrete = TipoFrete.Emitente; break;
                case 1: Selecionado.TipoFrete = TipoFrete.Destinatario; break;
                case 2: Selecionado.TipoFrete = TipoFrete.Terceiros; break;
                case 3: Selecionado.TipoFrete = TipoFrete.SemFrete; break;
            }

            Selecionado.Observacao1 = txtObservacao1.Text;
            Selecionado.Observacao2 = txtObservacao2.Text;
            Selecionado.Observacao3 = txtObservacao3.Text;
            Selecionado.Observacao1Licitacao = txtObservacao1Licitacao.Text;
            Selecionado.Observacao2Licitacao = txtObservacao2Licitacao.Text;
        }

        private void gvParcelas_DoubleClick(object sender, EventArgs e)
        {
            bAltercaoParcelas = BloqueaAlteracaoParcelas();
            if (!bAltercaoParcelas)
            {
                PedidoParcela registroSelecionado = Selecionado.Parcelas[gvParcelas.GetSelectedRows()[0]];
                if (registroSelecionado != null)
                {
                    FormOrcamentoParcela formManut = new FormOrcamentoParcela();

                    formManut.Operacao = cwkGestao.Modelo.Acao.Alterar ^ Acao.NaoPersistir;
                    formManut.Selecionado = registroSelecionado;
                    formManut.ShowDialog();

                    AtualizaParcelas();
                } 
            }
        }

        private void txtDt_Leave(object sender, EventArgs e)
        {
            Selecionado.Dt = txtDt.DateTime;
            AtualizaParcelas();
        }

        private void txtDtPrazoEntrega_Leave(object sender, EventArgs e)
        {
            Selecionado.DtPrazoEntrega = txtDtPrazoEntrega.DateTime;
            AtualizaParcelas();
        }

        private void SetaTabStopsDoXml(string uri)
        {
            try
            {
                XDocument doc = XDocument.Load(uri);

                XElement root = doc.Root;
                if (root == null) return;
                foreach (XElement elemento in root.Elements())
                {
                    Control controles = (Control)this.GetType().GetField(elemento.Name.LocalName, BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).GetValue(this);

                    if (controles != null)
                    {

                        controles.TabIndex = elemento.Attribute("TabIndex") != null
                                                    ? (int)elemento.Attribute("TabIndex")
                                                    : controles.TabIndex;
                        controles.TabStop = elemento.Attribute("TabStop") != null
                                                   ? Convert.ToBoolean(elemento.Attribute("TabStop").Value)
                                                   : controles.TabStop;
                        if (elemento.Attribute("TabStop") != null && !Convert.ToBoolean(elemento.Attribute("TabStop").Value))
                            controles.TabIndex = 0;

                        controles.Refresh();
                        controles.Update();
                        controles.Refresh();
                    }

                }
            }
            catch (Exception exc)
            {
                return;
            }
        }

        private void lkpPessoa_KeyDown(object sender, KeyEventArgs e)
        {
            atualizarPessoa = true;
        }

        private void btnEnderecoEntrega_Click(object sender, EventArgs e)
        {
            List<PessoaEndereco> pessoaEnderecosEntrega = Selecionado.Pessoa.PessoaEnderecos.Where(i => i.BEntrega).ToList();

            if (pessoaEnderecosEntrega.Count == 0)
                MessageBox.Show("O cliente selecionado não possui endereços de entrega cadastrados.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            else
            {
                GridGenerica<PessoaEndereco> gridEnderecoEntrega = new GridGenerica<PessoaEndereco>(pessoaEnderecosEntrega, new FormPessoaEndereco());
                gridEnderecoEntrega.Selecionando = true;
                gridEnderecoEntrega.EsconderBotoes(GridGenerica<PessoaEndereco>.Botao.Consultar | GridGenerica<PessoaEndereco>.Botao.Excluir | GridGenerica<PessoaEndereco>.Botao.Incluir);
                gridEnderecoEntrega.ShowDialog();
                PessoaEndereco pessoaEnderecoSelecionado = gridEnderecoEntrega.Selecionado;

                AtribuiEnderecoEntrega(pessoaEnderecoSelecionado);
            }

        }

        private void btnEntregaLimpar_Click(object sender, EventArgs e)
        {
            Selecionado.EnderecoEntrega = null;

            txtEntregaRua.Text = "";
            txtEntregaBairro.Text = "";
            txtEntregaCep.Text = "";
            txtEntregaCidade.Text = "";
            txtEntregaComplemento.Text = "";
            txtEntregaNumero.Text = "";
        }

        private void gvItems_InvalidValueException(object sender, DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs e)
        {
            if (e.ErrorText.Equals("Mais de um produto encontrado"))
            {
                IList<Produto> produtos = ProdutoController.Instancia.LoadProdutoByCodigoString(e.Value.ToString());            
                GridProdutoGenMais temp = new GridProdutoGenMais(produtos, FormProdutoFactory.GetFormProduto(), null, e.Value.ToString(), true);
                temp.Selecionando = true;
                //                temp.EsconderBotoes(GridGenerica<Produto>.Botao.Alterar | GridGenerica<Produto>.Botao.Consultar | GridGenerica<Produto>.Botao.Excluir | GridGenerica<Produto>.Botao.Incluir );
                temp.ShowDialog();
                if (temp.ProdutosSelecionados != null)
                {
                    try
                    {
                        AdicionarMais(temp.ProdutosSelecionados);
                        e.ExceptionMode = ExceptionMode.Ignore;
                    }
                    catch (Exception ex)
                    {
                        e.ErrorText = ex.Message;
                    }
                }
            }
        }

        private void txtValorDesconto_Leave(object sender, EventArgs e)
        {
            CalculaDesconto();
        }

        private void txtPercComissao_Leave(object sender, EventArgs e)
        {
            CalculaComissao();
        }


        private void txtPercDesconto_Leave(object sender, EventArgs e)
        {
            if (Selecionado.PercDesconto != txtPercDesconto.Value)
            {
                decimal valorItens = Selecionado.TotalProduto;

                if (valorItens > 0 && txtPercDesconto.Value <= 100)
                {
                    if (PercentualDescontoPermitido(txtPercDesconto.Value))
                    {
                        Selecionado.PercDesconto = txtPercDesconto.Value;
                        Selecionado.ValorDesconto = Math.Round(valorItens * txtPercDesconto.Value / 100, 2);
                        Selecionado.GerenteDesconto = UltimoLoginGerente;
                    }
                }
                else
                {
                    Selecionado.ValorDesconto = 0;
                    Selecionado.PercDesconto = 0;
                }
                AtualizaPedidoNaTela();
            }
        }

        private bool PercentualDescontoPermitido(decimal percentual)
        {
            if (percentual > GetConfiguracao().PercentualMaxDesconto)
                return RequisitaGerente();
            return true;
        }

        private void btnDescontoGeral_Leave(object sender, EventArgs e)
        {

        }

        private void CalculaComissao()
        {
            decimal ValorComissao = 0;
            ValorComissao = (txtPercComissao.Value);
            Selecionado.ValorComissao = ValorComissao;
        }

        private void CalculaDesconto()
        {
            decimal valorItens = Selecionado.TotalProduto;
            if (valorItens > 0 && valorItens > txtValorDesconto.Value)
            {
                decimal percDesconto = 0;
                if (txtValorDesconto.Value > 0)
                    percDesconto = Math.Round(txtValorDesconto.Value / valorItens * 100, 4);
                if (PercentualDescontoPermitido(percDesconto))
                {
                    Selecionado.ValorDesconto = txtValorDesconto.Value;
                    Selecionado.PercDesconto = percDesconto;
                }
            }
            else
            {
                Selecionado.ValorDesconto = 0;
                Selecionado.PercDesconto = 0;
            }
            AtualizaPedidoNaTela();
        }

        private void txtPercComissao_Leave_1(object sender, EventArgs e)
        {
            Selecionado.PercComissao = Convert.ToDecimal(txtPercComissao.Text);

            Selecionado.ValorComissao = Selecionado.TotalPedido * (Selecionado.PercComissao / 100);
            txtValorComissao.Text = Selecionado.ValorComissao.ToString(); 
        }
<<<<<<< .mine

        private void lkbLote_Click(object sender, EventArgs e)
        {
            GridLoteProducao gridLoteProducao = new GridLoteProducao();
            gridLoteProducao.ShowDialog();
        }
=======

>>>>>>> .r4318
    }
}

